basePath: /
definitions:
  dto.CartInsert:
    properties:
      inventory_id:
        type: integer
      quantity:
        type: integer
      user_id:
        type: integer
    required:
    - inventory_id
    - quantity
    - user_id
    type: object
  dto.CartSchema:
    properties:
      amount:
        type: string
      category:
        type: string
      img:
        type: string
      product_name:
        type: string
      quantity:
        type: integer
    type: object
  dto.CartSlices:
    properties:
      products:
        items:
          $ref: '#/definitions/dto.CartSchema'
        type: array
      user_id:
        type: integer
    type: object
  dto.Collection:
    properties:
      body:
        $ref: '#/definitions/dto.CollectionBody'
      created:
        type: string
      headline:
        type: string
      id:
        type: integer
      position:
        type: string
    required:
    - body
    - headline
    - position
    type: object
  dto.CollectionBody:
    properties:
      description:
        type: string
      image:
        type: string
      subtitle:
        type: string
      text_color:
        type: string
      title:
        type: string
    required:
    - description
    - subtitle
    - text_color
    - title
    type: object
  dto.CollectionSliceBody:
    properties:
      created:
        type: string
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      subtitle:
        type: string
      text_color:
        type: string
      title:
        type: string
    required:
    - description
    - subtitle
    - text_color
    - title
    type: object
  dto.CollectionUpload:
    properties:
      id:
        type: integer
      msg:
        type: string
    type: object
  dto.Collections:
    properties:
      card_banner:
        items:
          $ref: '#/definitions/dto.CollectionSliceBody'
        type: array
      headline:
        type: string
      position:
        type: string
    type: object
  dto.CreateOrderSchema:
    properties:
      product:
        items:
          properties:
            inventory_id:
              type: integer
            quantity:
              type: integer
          type: object
        type: array
      user_id:
        type: integer
    type: object
  dto.CreateProduct:
    properties:
      id:
        type: integer
      msg:
        type: string
    type: object
  dto.Error:
    properties:
      msg:
        type: string
    type: object
  dto.HeadlineBanner:
    properties:
      body:
        $ref: '#/definitions/dto.HeadlineBannerBody'
      created:
        type: string
      position:
        type: string
    required:
    - body
    - position
    type: object
  dto.HeadlineBannerBody:
    properties:
      headline:
        type: string
    required:
    - headline
    type: object
  dto.HeadlineBannerSlicesBody:
    properties:
      created:
        type: string
      headline:
        type: string
      id:
        type: integer
    required:
    - headline
    type: object
  dto.HeadlineBanners:
    properties:
      headlines:
        items:
          $ref: '#/definitions/dto.HeadlineBannerSlicesBody'
        type: array
      position:
        type: string
    type: object
  dto.Inventory:
    properties:
      available:
        type: string
      currency_code:
        type: string
      id:
        type: string
      price:
        type: string
      product_id:
        type: string
      product_name:
        type: string
      specs:
        $ref: '#/definitions/dto.InventorySpecsDetail'
      status:
        type: string
    required:
    - available
    - currency_code
    - price
    - product_id
    type: object
  dto.InventoryDetail:
    properties:
      available:
        type: string
      currency_code:
        type: string
      price:
        type: string
      product_id:
        type: string
      specs:
        $ref: '#/definitions/dto.InventorySpecsDetail'
    required:
    - available
    - currency_code
    - price
    - product_id
    type: object
  dto.InventorySpecsDetail:
    properties:
      color:
        type: string
      color_image:
        type: string
      image:
        items:
          type: string
        type: array
      ram:
        type: string
      ssd:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      email:
        type: string
      success:
        type: boolean
      token:
        type: string
    required:
    - email
    - success
    - token
    type: object
  dto.OK:
    properties:
      msg:
        type: string
    type: object
  dto.OrderSchema:
    properties:
      id:
        type: integer
      products:
        items:
          $ref: '#/definitions/dto.ProductOrderSchema'
        type: array
      status:
        type: string
      time:
        type: string
      user_email:
        type: string
      user_id:
        type: integer
      user_name:
        type: string
      uuid:
        type: string
    type: object
  dto.Product:
    properties:
      RAM:
        items:
          type: integer
        type: array
      SSD:
        items:
          type: integer
        type: array
      category_id:
        type: string
      description:
        type: string
      display:
        type: string
      name:
        type: string
      price:
        type: string
      screen:
        type: string
      status:
        type: string
      supplier_id:
        type: string
    required:
    - category_id
    - description
    - name
    - price
    - status
    - supplier_id
    type: object
  dto.ProductOrderSchema:
    properties:
      currency_code:
        type: string
      id:
        type: integer
      inventory_id:
        type: integer
      order_id:
        type: integer
      quantity:
        type: integer
      total_amount:
        type: string
    type: object
  dto.ProductSchema:
    properties:
      created:
        type: string
      description:
        type: string
      id:
        type: integer
      image:
        items:
          type: string
        type: array
      name:
        type: string
      price:
        type: string
      spec:
        $ref: '#/definitions/dto.Specs'
      status:
        type: string
    type: object
  dto.SignUpRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - phone_number
    type: object
  dto.SignUpResponse:
    properties:
      msg:
        type: string
      success:
        type: boolean
    required:
    - msg
    - success
    type: object
  dto.Slices-dto_ProductSchema:
    properties:
      body:
        items:
          $ref: '#/definitions/dto.ProductSchema'
        type: array
    type: object
  dto.Slices-entity_Categories:
    properties:
      body:
        items:
          $ref: '#/definitions/entity.Categories'
        type: array
    type: object
  dto.Slices-entity_Suppliers:
    properties:
      body:
        items:
          $ref: '#/definitions/entity.Suppliers'
        type: array
    type: object
  dto.Specs:
    properties:
      RAM:
        items:
          type: integer
        type: array
      SSD:
        items:
          type: integer
        type: array
      display:
        type: string
      screen:
        type: string
    type: object
  dto.StockHeader:
    properties:
      active:
        type: integer
      all:
        type: integer
      archive:
        type: integer
      draft:
        type: integer
    type: object
  dto.StockInInventory:
    properties:
      header:
        $ref: '#/definitions/dto.StockHeader'
      limit:
        type: integer
      page:
        type: integer
      stock:
        items:
          $ref: '#/definitions/dto.Inventory'
        type: array
    type: object
  dto.Supplier:
    properties:
      city:
        type: string
      district:
        type: string
      email:
        type: string
      name:
        type: string
      street:
        type: string
      ward:
        type: string
    required:
    - email
    - name
    type: object
  dto.UpdateInventory:
    properties:
      available:
        type: string
      currency_code:
        type: string
      id:
        type: string
      price:
        type: string
      product_id:
        type: string
      specs:
        $ref: '#/definitions/dto.InventorySpecsDetail'
      status:
        type: string
    type: object
  dto.UpdateProductInfo:
    properties:
      RAM:
        items:
          type: integer
        type: array
      SSD:
        items:
          type: integer
        type: array
      category_id:
        type: string
      description:
        type: string
      display:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: string
      screen:
        type: string
      status:
        type: string
      supplier_id:
        type: string
    required:
    - category_id
    - description
    - id
    - name
    - price
    - status
    - supplier_id
    type: object
  dto.User:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      phone_number:
        type: string
      username:
        type: string
    required:
    - email
    - first_name
    - id
    - last_name
    - phone_number
    - username
    type: object
  entity.Categories:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
    required:
    - description
    - name
    type: object
  entity.Suppliers:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  model.Users:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      image:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - email
    - first_name
    - id
    - image
    - last_name
    - phone_number
    - role
    - username
    type: object
info:
  contact: {}
  description: This is a documentation for the Swipe API
  title: Swipe API documentation
  version: 1.0.0
paths:
  /auth:
    get:
      consumes:
      - application/json
      description: check email address before login
      parameters:
      - description: email address
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OK'
      tags:
      - account_management
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login account.
      parameters:
      - description: Login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
      tags:
      - account_management
  /auth/logout:
    get:
      consumes:
      - application/json
      description: logout user from the service
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OK'
      tags:
      - account_management
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Register account for admin.
      parameters:
      - description: Sign Up
        in: body
        name: sign_up
        required: true
        schema:
          $ref: '#/definitions/dto.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SignUpResponse'
      tags:
      - account_management
  /categories:
    get:
      consumes:
      - application/json
      description: get categories
      parameters:
      - description: limit number
        in: query
        name: limit
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Slices-entity_Categories'
      tags:
      - products
    post:
      consumes:
      - application/json
      description: insert new category
      parameters:
      - description: Categories Request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/entity.Categories'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.OK'
      tags:
      - products
  /collections:
    get:
      consumes:
      - application/json
      description: create collections
      parameters:
      - description: position of collections
        in: query
        name: position
        required: true
        type: string
      - description: limit of cards banner slices
        in: query
        name: limit
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Collections'
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: create collections
      parameters:
      - description: collections Request
        in: body
        name: collection
        required: true
        schema:
          $ref: '#/definitions/dto.Collection'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CollectionUpload'
      tags:
      - posts
  /collections/headline:
    get:
      consumes:
      - application/json
      description: get list of headline banner
      parameters:
      - description: position of collections
        in: query
        name: position
        required: true
        type: string
      - description: limit headline of collections
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.HeadlineBanners'
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: create headline banner into collections
      parameters:
      - description: headline banner data request
        in: body
        name: banner
        required: true
        schema:
          $ref: '#/definitions/dto.HeadlineBanner'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.OK'
      tags:
      - posts
  /collections/img:
    put:
      consumes:
      - application/json
      description: create collections
      parameters:
      - description: image of collections
        in: formData
        name: img
        required: true
        type: file
      - description: collections identifier
        in: formData
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OK'
      tags:
      - posts
  /common/healthcheck:
    get:
      consumes:
      - application/json
      description: health check api server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
      tags:
      - common
  /common/worker:
    get:
      consumes:
      - application/json
      description: health check worker consume server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
      tags:
      - common
  /inventories:
    delete:
      consumes:
      - application/json
      description: delete inventory by id
      parameters:
      - description: inventory id
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OK'
      tags:
      - products
    get:
      consumes:
      - application/json
      description: get all product from inventory
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: number
      - description: limit
        in: query
        name: limit
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.StockInInventory'
      tags:
      - products
    post:
      consumes:
      - application/json
      description: add product to inventories
      parameters:
      - description: Inventories Request
        in: body
        name: InventoryDetail
        required: true
        schema:
          $ref: '#/definitions/dto.InventoryDetail'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.OK'
      tags:
      - products
    put:
      consumes:
      - application/json
      description: update inventory
      parameters:
      - description: Inventory Request
        in: body
        name: inventory
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateInventory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OK'
      tags:
      - products
  /inventories/details:
    get:
      consumes:
      - application/json
      description: get product availability in inventories
      parameters:
      - description: product id
        in: query
        name: pid
        required: true
        type: number
      - description: ram
        in: query
        name: ram
        required: true
        type: number
      - description: ssd
        in: query
        name: ssd
        required: true
        type: number
      - description: color
        in: query
        name: color
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Inventory'
      tags:
      - products
  /inventory/image:
    put:
      consumes:
      - application/json
      description: update inventory image
      parameters:
      - description: stock image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OK'
      tags:
      - products
  /oauth2/login:
    get:
      consumes:
      - application/json
      description: Auth0 Login form.
      produces:
      - application/json
      responses:
        "200":
          description: OK
      tags:
      - common
  /products:
    delete:
      consumes:
      - application/json
      description: delete product by id
      parameters:
      - description: product id
        in: query
        name: pid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OK'
      tags:
      - products
    get:
      consumes:
      - application/json
      description: get product information
      parameters:
      - description: limit number of products
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Slices-dto_ProductSchema'
      tags:
      - products
    post:
      consumes:
      - application/json
      description: create new product
      parameters:
      - description: Product Request
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreateProduct'
      tags:
      - products
    put:
      consumes:
      - application/json
      description: update product information
      parameters:
      - description: Product Information Request
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProductInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OK'
      tags:
      - products
  /products/img:
    post:
      consumes:
      - multipart/form-data
      description: insert new product image
      parameters:
      - description: id of product
        in: query
        name: id
        required: true
        type: string
      - description: image of product
        in: formData
        name: img
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OK'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Error'
      tags:
      - products
  /purchase/carts:
    delete:
      consumes:
      - application/json
      description: delete item from carts
      parameters:
      - description: user id
        in: query
        name: uid
        required: true
        type: integer
      - description: inventories id
        in: query
        name: wid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OK'
      tags:
      - purchase
    get:
      consumes:
      - application/json
      description: get list of items from carts
      parameters:
      - description: user id
        in: query
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CartSlices'
      tags:
      - purchase
    post:
      consumes:
      - application/json
      description: add item to carts.
      parameters:
      - description: cart insert request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.CartInsert'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OK'
      tags:
      - purchase
  /purchase/orders:
    get:
      consumes:
      - application/json
      description: get list of orders.
      parameters:
      - description: user id
        in: query
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.OrderSchema'
            type: array
      tags:
      - purchase
    post:
      consumes:
      - application/json
      description: create order.
      parameters:
      - description: order insert request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.CreateOrderSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OK'
      tags:
      - purchase
  /suppliers:
    get:
      consumes:
      - application/json
      description: get suppliers information
      parameters:
      - description: limit number of suppliers
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Slices-entity_Suppliers'
      tags:
      - products
    post:
      consumes:
      - application/json
      description: insert new suppliers information
      parameters:
      - description: Suppliers Request
        in: body
        name: Supplier
        required: true
        schema:
          $ref: '#/definitions/dto.Supplier'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.OK'
      tags:
      - products
  /users:
    get:
      consumes:
      - application/json
      description: get information for users.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Users'
      tags:
      - account_management
    put:
      consumes:
      - application/json
      description: update information for users.
      parameters:
      - description: Update Users
        in: body
        name: UserSchema
        required: true
        schema:
          $ref: '#/definitions/dto.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OK'
      tags:
      - account_management
  /users/image:
    put:
      consumes:
      - application/json
      description: update information for users.
      parameters:
      - description: image of collections
        in: formData
        name: img
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OK'
      tags:
      - account_management
swagger: "2.0"
